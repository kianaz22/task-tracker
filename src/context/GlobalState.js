import React, { createContext, useReducer } from "react";
import AppReducer from "./AppReducer";

// Initial state
const initialState = {
  tasks: [
    {
      id: 1,
      text: "Site configuration",
      details:
        "Configure the site on the internal clients production environment",
      time: "Jan 4th",
      status: "open",
    },
    {
      id: 2,
      text: "New feature",
      details: "Add the pop-up promotion feature",
      time: "Jan 15th",
      status: "open",
    },
    {
      id: 3,
      text: "release the beta version ",
      details: "to selected internal users",
      time: "Jan 1st",
      status: "open",
    },
    {
      id: 4,
      text: "Verification",
      details: "Verify the expected response times",
      time: "Feb 2nd",
      status: "running",
    },
    {
      id: 5,
      text: "Verification",
      details: "Verify the quote for the next story",
      time: "Dec 28th",
      status: "finished",
    },
    {
      id: 6,
      text: "Structure set up",
      details: "Set up the initial structure of the sites first page",
      time: "Dec 20th",
      status: "finished",
    },
    {
      id: 7,
      text: "Approval",
      details: "Receive the internal clients approval for the structure",
      time: "Feb 11th",
      status: "running",
    },
    {
      id: 8,
      text: "Report",
      details: "Code the reports generated by the site related transactions",
      time: "Dec 15th",
      status: "finished",
    },
  ],
};

// Create context
export const GlobalContext = createContext(initialState);

// Provider component
export const GlobalProvider = ({ children }) => {
  const [state, dispatch] = useReducer(AppReducer, initialState);

  // Actions
  function loadTasks(tasks) {
    dispatch({
      type: "LOAD_TASKS",
      payload: tasks,
    });
  }

  function deleteTask(id) {
    dispatch({
      type: "DELETE_TASK",
      payload: id,
    });
  }

  function addTask(task) {
    dispatch({
      type: "ADD_TASK",
      payload: task,
    });
  }

  function changeStatus(id, newStatus) {
    dispatch({
      type: "CHANGE_STATUS",
      payload: { id, newStatus },
    });
  }

  return (
    <GlobalContext.Provider
      value={{
        tasks: state.tasks,
        deleteTask,
        addTask,
        changeStatus,
        loadTasks,
      }}
    >
      {children}
    </GlobalContext.Provider>
  );
};
